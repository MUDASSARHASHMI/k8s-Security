1. Start setting up Admission Control directory.
    $ sudo mkdir -p /etc/kubernetes/admission-control
2. External service does need the self signed certificate so we will need certificates for
ImagePolicyWebhook as well. We will need a client certificate and key, and CA authority certificate
so that ImagePlolicyWebhook will actually trust certificates from the API server.
    $ sudo wget -O /etc/kubernetes/admission-control/imagepolicywebhook-ca.crt https://raw.githubusercontent.com/linuxacademy/content-cks-trivy-k8s-webhook/main/certs/ca.crt
    $ sudo wget -O /etc/kubernetes/admission-control/api-server-client.crt https://raw.githubusercontent.com/linuxacademy/content-cks-trivy-k8s-webhook/main/certs/api-serverclient.crt
    $ sudo wget -O /etc/kubernetes/admission-control/api-server-client.key https://raw.githubusercontent.com/linuxacademy/content-cks-trivy-k8s-webhook/main/certs/api-serverclient.key
All these certificates are included in the sample app "content-cks-trivy-k8s-webhook/certs".
3. Create an admission controller configuration file.
    $ sudo vi /etc/kubernetes/admission-control/admission-control.conf
    ```
    apiVersion: apiserver.config.k8s.io/v1
    kind: AdmissionConfiguration
    plugins:
    - name: ImagePolicyWebhook
        configuration:
        imagePolicy:
            kubeConfigFile: /etc/kubernetes/admission-control/imagepolicywebhook_backend.kubeconfig
            allowTTL: 50
            denyTTL: 50
            retryBackoff: 500
            defaultAllow: false
    ```
 4. Implement the kubeconfig file for the ImagePolicyWebhook.
    $ sudo vi /etc/kubernetes/admission-control/imagepolicywebhook_backend.kubeconfig
```
apiVersion: v1
kind: Config
clusters:
- name: trivy-k8s-webhook
  cluster:
    certificate-authority: /etc/kubernetes/admission-control/imagepolicywebhook-ca.crt
    server: https://acg.trivy.k8s.webhook:8090/scan
contexts:
- name: trivy-k8s-webhook
  context:
    cluster: trivy-k8s-webhook
    user: api-server
current-context: trivy-k8s-webhook
preferences: {}
users:
- name: api-server
  user:
    client-certificate: /etc/kubernetes/admission-control/api-server-client.crt
    client-key: /etc/kubernetes/admission-control/api-server-client.key
```
5. Make changes to Kube-API server:
    $ sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml
    - Find the line that starts with --enable-admission-plugins and add
    ImagePolicyWebhook to the list:
    - --enable-admission-plugins=NodeRestriction,ImagePolicyWebhook
    - Add a new line after - kube-apiserver (the first in list) to reference the admission control config:
    - --admission-control-config-file=/etc/kubernetes/admission-control/admission-control.conf
    - In the end of kube-apiserver.yaml file there will be "volumeMounts". We need to add a volume
    mount for the admission control config file so our config can be picked up.
    volumeMounts:
    ...
    - name: admission-control
      mountPath: /etc/kubernetes/admission-control
      readOnly: true
    ...
    - Finally add a volume itself in end of the file.
    volumes:
    ...
    - name: admission-control
      hostPath:
        path: /etc/kubernetes/admission-control
        type: DirectoryOrCreate
6. Restart the kubelet service.
    $ sudo systemctl restart kubelet

7. Check the status of kubelet service.
    $ sudo systemctl status kubelet
8. Create a pod with and image policy "imagepolicy-busybox-pod.yml"
---
apiVersion: v1
kind: Pod
metadata:
  name: imagepolicy-busybox-pod
spec:
  restartPolicy: Never
  containers:
    - name: busybox
      image: busybox:1.33.1
---
9. Test a Pod by creating an image with security vulnerabilities.
   $ vi imagepolicy-nginx-pod.yml
---
apiVersion: v1
kind: Pod
metadata:
  name: imagepolicy-nginx-pod
spec:
  containers:
  - name: nginx
    image: nginx:1.20.1
---
10. Create a pod out of the file created above.
   $ kubectl create -f imagepolicy-nginx-pod.yml

11. Since we try to create a Pod from contianer image that has a lot of vulnerabilities so
we will get an error from admission controller telling us "Image containers seriousl vulnerabilities".

12. To undo ImagePolicyWebhook, remove the ImagePolicyWebhook from the list of admission controller
in kube-apiserver.yaml file and restart the kubelet service.



